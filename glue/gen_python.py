# Python wrapper generator

from soloud_codegen import *

fo = open("soloud.py", "w")

"""
from ctypes import *

soloud_dll = CDLL("soloud_x86")

myfunc = soloud_dll.myfunc
myfunc.argtypes = [c_char_p, c_int, c_double]
myfunc.restype = c_int
"""

def fudge_types(x):
	# TODO: map the types to ctypes
	return 'c_int'

fo.write("# SoLoud wrapper for Python\n")
fo.write("# This file is autogenerated; any changes will be overwritten\n")

fo.write("\n")
fo.write('from ctypes import *')
fo.write('soloud_dll = CDLL("soloud_x86")')
fo.write("\n")

fo.write("# Enumerations\n")
fo.write("soloud_enum = {\n")
first = True
for x in soloud_enum:
	if first:
		first = False
	else:
	  fo.write(",\n")
	fo.write('"' + x + '": ' + str(soloud_enum[x]))
fo.write("\n}\n")

fo.write("\n")
fo.write("# Functions\n")
for x in soloud_func:
	fo.write(x[1] + ' = soloud_dll.' + x[1] + '\n')
	fo.write(x[1] + '.restype = ' + fudge_types(x[0]) + '\n')
	fo.write(x[1] + '.argtypes = [')
	first = True
	for y in x[2]:
		if len(y) > 0:
			if (first):
				first = False
			else:
				fo.write(", ")
			fo.write(fudge_types(y[0]))
	fo.write(']\n')
	fo.write('\n')

fo.close()
print "soloud.py generated"
