<!--SoLoud wrapper (extension) for game maker-->
<!--This Document is generated by gen_gamemaker.py, if you edit it by hand then you do so at your own risk!-->
<extension>
  <name>soloud</name>
  <version>1.0.0</version>
  <packageID></packageID>
  <ProductID>ACBD3CFF4E539AD869A0E8E3B4B022DD</ProductID>
  <date>17/04/15</date>
  <license>Free to use, also for commercial games.</license>
  <description></description>
  <helpfile></helpfile>
  <androidProps>0</androidProps>
  <iosProps>0</iosProps>
  <installdir></installdir>
  <classname></classname>
  <androidclassname></androidclassname>
  <sourcedir></sourcedir>
  <androidsourcedir></androidsourcedir>
  <macsourcedir></macsourcedir>
  <maclinkerflags></maclinkerflags>
  <androidinject></androidinject>
  <iosSystemFrameworks/>
  <iosThirdPartyFrameworks/>
  <androidPermissions/>
  <IncludedResources/>
  <files>
    <file>
      <filename>soloud_gamemaker_dll.dll</filename>
      <origname>extensions\soloud_gamemaker_dll.dll</origname>
      <init></init>
      <final></final>
      <kind>1</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>542113856</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles>
        <ProxyFile>
          <Name>soloud_x86.dll</Name>
          <TargetMask>1048640</TargetMask>
        </ProxyFile>
        <ProxyFile>
          <Name>msvcr100.dll</Name>
          <TargetMask>1048640</TargetMask>
        </ProxyFile>
        <ProxyFile>
          <Name>soloud_gamemaker_dll.dll</Name>
          <TargetMask>1048640</TargetMask>
        </ProxyFile>
      </ProxyFiles>
      <functions>
        <function>
          <name>Soloud_destroy</name>
          <externalName>Soloud_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_destroy(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_create</name>
          <externalName>Soloud_create</externalName>
          <kind>11</kind>
          <help>Original function: Soloud * Soloud_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>Soloud_init</name>
          <externalName>Soloud_init</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_init(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_initEx</name>
          <externalName>Soloud_initEx</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_initEx(Soloud * aSoloud, unsigned int aFlags, unsigned int aBackend, unsigned int aSamplerate, unsigned int aBufferSize)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_deinit</name>
          <externalName>Soloud_deinit</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_deinit(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getVersion</name>
          <externalName>Soloud_getVersion</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_getVersion(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getErrorString</name>
          <externalName>Soloud_getErrorString</externalName>
          <kind>11</kind>
          <help>Original function: const char * Soloud_getErrorString(Soloud * aSoloud, int aErrorCode)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_play</name>
          <externalName>Soloud_play</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_play(Soloud * aSoloud, AudioSource * aSound)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_playEx</name>
          <externalName>Soloud_playEx</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_playEx(Soloud * aSoloud, AudioSource * aSound, float aVolume, float aPan, int aPaused, unsigned int aBus)</help>
          <returnType>2</returnType>
          <argCount>6</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_playClocked</name>
          <externalName>Soloud_playClocked</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_playClocked(Soloud * aSoloud, double aSoundTime, AudioSource * aSound)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_playClockedEx</name>
          <externalName>Soloud_playClockedEx</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_playClockedEx(Soloud * aSoloud, double aSoundTime, AudioSource * aSound, float aVolume, float aPan, unsigned int aBus)</help>
          <returnType>2</returnType>
          <argCount>6</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_play3d</name>
          <externalName>Soloud_play3d</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_play3d(Soloud * aSoloud, AudioSource * aSound, float aPosX, float aPosY, float aPosZ)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_play3dEx</name>
          <externalName>Soloud_play3dEx</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_play3dEx(Soloud * aSoloud, AudioSource * aSound, float aPosX, float aPosY, float aPosZ, float aVelX, float aVelY, float aVelZ, float aVolume, int aPaused, unsigned int aBus)</help>
          <returnType>2</returnType>
          <argCount>11</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_play3dClocked</name>
          <externalName>Soloud_play3dClocked</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_play3dClocked(Soloud * aSoloud, double aSoundTime, AudioSource * aSound, float aPosX, float aPosY, float aPosZ)</help>
          <returnType>2</returnType>
          <argCount>6</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_play3dClockedEx</name>
          <externalName>Soloud_play3dClockedEx</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_play3dClockedEx(Soloud * aSoloud, double aSoundTime, AudioSource * aSound, float aPosX, float aPosY, float aPosZ, float aVelX, float aVelY, float aVelZ, float aVolume, unsigned int aBus)</help>
          <returnType>2</returnType>
          <argCount>11</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_seek</name>
          <externalName>Soloud_seek</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_seek(Soloud * aSoloud, unsigned int aVoiceHandle, double aSeconds)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_stop</name>
          <externalName>Soloud_stop</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_stop(Soloud * aSoloud, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_stopAll</name>
          <externalName>Soloud_stopAll</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_stopAll(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_stopAudioSource</name>
          <externalName>Soloud_stopAudioSource</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_stopAudioSource(Soloud * aSoloud, AudioSource * aSound)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setFilterParameter</name>
          <externalName>Soloud_setFilterParameter</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setFilterParameter(Soloud * aSoloud, unsigned int aVoiceHandle, unsigned int aFilterId, unsigned int aAttributeId, float aValue)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getFilterParameter</name>
          <externalName>Soloud_getFilterParameter</externalName>
          <kind>11</kind>
          <help>Original function: float Soloud_getFilterParameter(Soloud * aSoloud, unsigned int aVoiceHandle, unsigned int aFilterId, unsigned int aAttributeId)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_fadeFilterParameter</name>
          <externalName>Soloud_fadeFilterParameter</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_fadeFilterParameter(Soloud * aSoloud, unsigned int aVoiceHandle, unsigned int aFilterId, unsigned int aAttributeId, float aTo, double aTime)</help>
          <returnType>2</returnType>
          <argCount>6</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_oscillateFilterParameter</name>
          <externalName>Soloud_oscillateFilterParameter</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_oscillateFilterParameter(Soloud * aSoloud, unsigned int aVoiceHandle, unsigned int aFilterId, unsigned int aAttributeId, float aFrom, float aTo, double aTime)</help>
          <returnType>2</returnType>
          <argCount>7</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getStreamTime</name>
          <externalName>Soloud_getStreamTime</externalName>
          <kind>11</kind>
          <help>Original function: double Soloud_getStreamTime(Soloud * aSoloud, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getPause</name>
          <externalName>Soloud_getPause</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_getPause(Soloud * aSoloud, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getVolume</name>
          <externalName>Soloud_getVolume</externalName>
          <kind>11</kind>
          <help>Original function: float Soloud_getVolume(Soloud * aSoloud, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getPan</name>
          <externalName>Soloud_getPan</externalName>
          <kind>11</kind>
          <help>Original function: float Soloud_getPan(Soloud * aSoloud, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getSamplerate</name>
          <externalName>Soloud_getSamplerate</externalName>
          <kind>11</kind>
          <help>Original function: float Soloud_getSamplerate(Soloud * aSoloud, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getProtectVoice</name>
          <externalName>Soloud_getProtectVoice</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_getProtectVoice(Soloud * aSoloud, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getActiveVoiceCount</name>
          <externalName>Soloud_getActiveVoiceCount</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_getActiveVoiceCount(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_isValidVoiceHandle</name>
          <externalName>Soloud_isValidVoiceHandle</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_isValidVoiceHandle(Soloud * aSoloud, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getRelativePlaySpeed</name>
          <externalName>Soloud_getRelativePlaySpeed</externalName>
          <kind>11</kind>
          <help>Original function: float Soloud_getRelativePlaySpeed(Soloud * aSoloud, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getPostClipScaler</name>
          <externalName>Soloud_getPostClipScaler</externalName>
          <kind>11</kind>
          <help>Original function: float Soloud_getPostClipScaler(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getGlobalVolume</name>
          <externalName>Soloud_getGlobalVolume</externalName>
          <kind>11</kind>
          <help>Original function: float Soloud_getGlobalVolume(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setGlobalVolume</name>
          <externalName>Soloud_setGlobalVolume</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setGlobalVolume(Soloud * aSoloud, float aVolume)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setPostClipScaler</name>
          <externalName>Soloud_setPostClipScaler</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setPostClipScaler(Soloud * aSoloud, float aScaler)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setPause</name>
          <externalName>Soloud_setPause</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setPause(Soloud * aSoloud, unsigned int aVoiceHandle, int aPause)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setPauseAll</name>
          <externalName>Soloud_setPauseAll</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setPauseAll(Soloud * aSoloud, int aPause)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setRelativePlaySpeed</name>
          <externalName>Soloud_setRelativePlaySpeed</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_setRelativePlaySpeed(Soloud * aSoloud, unsigned int aVoiceHandle, float aSpeed)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setProtectVoice</name>
          <externalName>Soloud_setProtectVoice</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setProtectVoice(Soloud * aSoloud, unsigned int aVoiceHandle, int aProtect)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setSamplerate</name>
          <externalName>Soloud_setSamplerate</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setSamplerate(Soloud * aSoloud, unsigned int aVoiceHandle, float aSamplerate)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setPan</name>
          <externalName>Soloud_setPan</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setPan(Soloud * aSoloud, unsigned int aVoiceHandle, float aPan)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setPanAbsolute</name>
          <externalName>Soloud_setPanAbsolute</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setPanAbsolute(Soloud * aSoloud, unsigned int aVoiceHandle, float aLVolume, float aRVolume)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setVolume</name>
          <externalName>Soloud_setVolume</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setVolume(Soloud * aSoloud, unsigned int aVoiceHandle, float aVolume)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setDelaySamples</name>
          <externalName>Soloud_setDelaySamples</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setDelaySamples(Soloud * aSoloud, unsigned int aVoiceHandle, unsigned int aSamples)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_fadeVolume</name>
          <externalName>Soloud_fadeVolume</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_fadeVolume(Soloud * aSoloud, unsigned int aVoiceHandle, float aTo, double aTime)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_fadePan</name>
          <externalName>Soloud_fadePan</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_fadePan(Soloud * aSoloud, unsigned int aVoiceHandle, float aTo, double aTime)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_fadeRelativePlaySpeed</name>
          <externalName>Soloud_fadeRelativePlaySpeed</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_fadeRelativePlaySpeed(Soloud * aSoloud, unsigned int aVoiceHandle, float aTo, double aTime)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_fadeGlobalVolume</name>
          <externalName>Soloud_fadeGlobalVolume</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_fadeGlobalVolume(Soloud * aSoloud, float aTo, double aTime)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_schedulePause</name>
          <externalName>Soloud_schedulePause</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_schedulePause(Soloud * aSoloud, unsigned int aVoiceHandle, double aTime)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_scheduleStop</name>
          <externalName>Soloud_scheduleStop</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_scheduleStop(Soloud * aSoloud, unsigned int aVoiceHandle, double aTime)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_oscillateVolume</name>
          <externalName>Soloud_oscillateVolume</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_oscillateVolume(Soloud * aSoloud, unsigned int aVoiceHandle, float aFrom, float aTo, double aTime)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_oscillatePan</name>
          <externalName>Soloud_oscillatePan</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_oscillatePan(Soloud * aSoloud, unsigned int aVoiceHandle, float aFrom, float aTo, double aTime)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_oscillateRelativePlaySpeed</name>
          <externalName>Soloud_oscillateRelativePlaySpeed</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_oscillateRelativePlaySpeed(Soloud * aSoloud, unsigned int aVoiceHandle, float aFrom, float aTo, double aTime)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_oscillateGlobalVolume</name>
          <externalName>Soloud_oscillateGlobalVolume</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_oscillateGlobalVolume(Soloud * aSoloud, float aFrom, float aTo, double aTime)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setGlobalFilter</name>
          <externalName>Soloud_setGlobalFilter</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setGlobalFilter(Soloud * aSoloud, unsigned int aFilterId, Filter * aFilter)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_setVisualizationEnable</name>
          <externalName>Soloud_setVisualizationEnable</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_setVisualizationEnable(Soloud * aSoloud, int aEnable)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_getLoopCount</name>
          <externalName>Soloud_getLoopCount</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_getLoopCount(Soloud * aSoloud, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_createVoiceGroup</name>
          <externalName>Soloud_createVoiceGroup</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Soloud_createVoiceGroup(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_destroyVoiceGroup</name>
          <externalName>Soloud_destroyVoiceGroup</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_destroyVoiceGroup(Soloud * aSoloud, unsigned int aVoiceGroupHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_addVoiceToGroup</name>
          <externalName>Soloud_addVoiceToGroup</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_addVoiceToGroup(Soloud * aSoloud, unsigned int aVoiceGroupHandle, unsigned int aVoiceHandle)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_isVoiceGroup</name>
          <externalName>Soloud_isVoiceGroup</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_isVoiceGroup(Soloud * aSoloud, unsigned int aVoiceGroupHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_isVoiceGroupEmpty</name>
          <externalName>Soloud_isVoiceGroupEmpty</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_isVoiceGroupEmpty(Soloud * aSoloud, unsigned int aVoiceGroupHandle)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_update3dAudio</name>
          <externalName>Soloud_update3dAudio</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_update3dAudio(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dSoundSpeed</name>
          <externalName>Soloud_set3dSoundSpeed</externalName>
          <kind>11</kind>
          <help>Original function: int Soloud_set3dSoundSpeed(Soloud * aSoloud, float aSpeed)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_get3dSoundSpeed</name>
          <externalName>Soloud_get3dSoundSpeed</externalName>
          <kind>11</kind>
          <help>Original function: float Soloud_get3dSoundSpeed(Soloud * aSoloud)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dListenerParameters</name>
          <externalName>Soloud_set3dListenerParameters</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dListenerParameters(Soloud * aSoloud, float aPosX, float aPosY, float aPosZ, float aAtX, float aAtY, float aAtZ, float aUpX, float aUpY, float aUpZ)</help>
          <returnType>2</returnType>
          <argCount>10</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dListenerParametersEx</name>
          <externalName>Soloud_set3dListenerParametersEx</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dListenerParametersEx(Soloud * aSoloud, float aPosX, float aPosY, float aPosZ, float aAtX, float aAtY, float aAtZ, float aUpX, float aUpY, float aUpZ, float aVelocityX, float aVelocityY, float aVelocityZ)</help>
          <returnType>2</returnType>
          <argCount>13</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dListenerPosition</name>
          <externalName>Soloud_set3dListenerPosition</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dListenerPosition(Soloud * aSoloud, float aPosX, float aPosY, float aPosZ)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dListenerAt</name>
          <externalName>Soloud_set3dListenerAt</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dListenerAt(Soloud * aSoloud, float aAtX, float aAtY, float aAtZ)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dListenerUp</name>
          <externalName>Soloud_set3dListenerUp</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dListenerUp(Soloud * aSoloud, float aUpX, float aUpY, float aUpZ)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dListenerVelocity</name>
          <externalName>Soloud_set3dListenerVelocity</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dListenerVelocity(Soloud * aSoloud, float aVelocityX, float aVelocityY, float aVelocityZ)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dSourceParameters</name>
          <externalName>Soloud_set3dSourceParameters</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dSourceParameters(Soloud * aSoloud, unsigned int aVoiceHandle, float aPosX, float aPosY, float aPosZ)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dSourceParametersEx</name>
          <externalName>Soloud_set3dSourceParametersEx</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dSourceParametersEx(Soloud * aSoloud, unsigned int aVoiceHandle, float aPosX, float aPosY, float aPosZ, float aVelocityX, float aVelocityY, float aVelocityZ)</help>
          <returnType>2</returnType>
          <argCount>8</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dSourcePosition</name>
          <externalName>Soloud_set3dSourcePosition</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dSourcePosition(Soloud * aSoloud, unsigned int aVoiceHandle, float aPosX, float aPosY, float aPosZ)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dSourceVelocity</name>
          <externalName>Soloud_set3dSourceVelocity</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dSourceVelocity(Soloud * aSoloud, unsigned int aVoiceHandle, float aVelocityX, float aVelocityY, float aVelocityZ)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dSourceMinMaxDistance</name>
          <externalName>Soloud_set3dSourceMinMaxDistance</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dSourceMinMaxDistance(Soloud * aSoloud, unsigned int aVoiceHandle, float aMinDistance, float aMaxDistance)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dSourceAttenuation</name>
          <externalName>Soloud_set3dSourceAttenuation</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dSourceAttenuation(Soloud * aSoloud, unsigned int aVoiceHandle, unsigned int aAttenuationModel, float aAttenuationRolloffFactor)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Soloud_set3dSourceDopplerFactor</name>
          <externalName>Soloud_set3dSourceDopplerFactor</externalName>
          <kind>11</kind>
          <help>Original function: void Soloud_set3dSourceDopplerFactor(Soloud * aSoloud, unsigned int aVoiceHandle, float aDopplerFactor)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>BiquadResonantFilter_destroy</name>
          <externalName>BiquadResonantFilter_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void BiquadResonantFilter_destroy(BiquadResonantFilter * aBiquadResonantFilter)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>BiquadResonantFilter_create</name>
          <externalName>BiquadResonantFilter_create</externalName>
          <kind>11</kind>
          <help>Original function: BiquadResonantFilter * BiquadResonantFilter_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>BiquadResonantFilter_setParams</name>
          <externalName>BiquadResonantFilter_setParams</externalName>
          <kind>11</kind>
          <help>Original function: int BiquadResonantFilter_setParams(BiquadResonantFilter * aBiquadResonantFilter, int aType, float aSampleRate, float aFrequency, float aResonance)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_destroy</name>
          <externalName>Bus_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_destroy(Bus * aBus)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_create</name>
          <externalName>Bus_create</externalName>
          <kind>11</kind>
          <help>Original function: Bus * Bus_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>Bus_setFilter</name>
          <externalName>Bus_setFilter</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_setFilter(Bus * aBus, unsigned int aFilterId, Filter * aFilter)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_play</name>
          <externalName>Bus_play</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Bus_play(Bus * aBus, AudioSource * aSound)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_playEx</name>
          <externalName>Bus_playEx</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Bus_playEx(Bus * aBus, AudioSource * aSound, float aVolume, float aPan, int aPaused)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_playClocked</name>
          <externalName>Bus_playClocked</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Bus_playClocked(Bus * aBus, double aSoundTime, AudioSource * aSound)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_playClockedEx</name>
          <externalName>Bus_playClockedEx</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Bus_playClockedEx(Bus * aBus, double aSoundTime, AudioSource * aSound, float aVolume, float aPan)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_play3d</name>
          <externalName>Bus_play3d</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Bus_play3d(Bus * aBus, AudioSource * aSound, float aPosX, float aPosY, float aPosZ)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_play3dEx</name>
          <externalName>Bus_play3dEx</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Bus_play3dEx(Bus * aBus, AudioSource * aSound, float aPosX, float aPosY, float aPosZ, float aVelX, float aVelY, float aVelZ, float aVolume, int aPaused)</help>
          <returnType>2</returnType>
          <argCount>10</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_play3dClocked</name>
          <externalName>Bus_play3dClocked</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Bus_play3dClocked(Bus * aBus, double aSoundTime, AudioSource * aSound, float aPosX, float aPosY, float aPosZ)</help>
          <returnType>2</returnType>
          <argCount>6</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_play3dClockedEx</name>
          <externalName>Bus_play3dClockedEx</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Bus_play3dClockedEx(Bus * aBus, double aSoundTime, AudioSource * aSound, float aPosX, float aPosY, float aPosZ, float aVelX, float aVelY, float aVelZ, float aVolume)</help>
          <returnType>2</returnType>
          <argCount>10</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_setVisualizationEnable</name>
          <externalName>Bus_setVisualizationEnable</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_setVisualizationEnable(Bus * aBus, int aEnable)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_setLooping</name>
          <externalName>Bus_setLooping</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_setLooping(Bus * aBus, int aLoop)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_set3dMinMaxDistance</name>
          <externalName>Bus_set3dMinMaxDistance</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_set3dMinMaxDistance(Bus * aBus, float aMinDistance, float aMaxDistance)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_set3dAttenuation</name>
          <externalName>Bus_set3dAttenuation</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_set3dAttenuation(Bus * aBus, unsigned int aAttenuationModel, float aAttenuationRolloffFactor)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_set3dDopplerFactor</name>
          <externalName>Bus_set3dDopplerFactor</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_set3dDopplerFactor(Bus * aBus, float aDopplerFactor)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_set3dProcessing</name>
          <externalName>Bus_set3dProcessing</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_set3dProcessing(Bus * aBus, int aDo3dProcessing)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_set3dListenerRelative</name>
          <externalName>Bus_set3dListenerRelative</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_set3dListenerRelative(Bus * aBus, int aListenerRelative)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_set3dDistanceDelay</name>
          <externalName>Bus_set3dDistanceDelay</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_set3dDistanceDelay(Bus * aBus, int aDistanceDelay)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_set3dCollider</name>
          <externalName>Bus_set3dCollider</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_set3dCollider(Bus * aBus, AudioCollider * aCollider)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_set3dColliderEx</name>
          <externalName>Bus_set3dColliderEx</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_set3dColliderEx(Bus * aBus, AudioCollider * aCollider, int aUserData)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Bus_stop</name>
          <externalName>Bus_stop</externalName>
          <kind>11</kind>
          <help>Original function: void Bus_stop(Bus * aBus)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>EchoFilter_destroy</name>
          <externalName>EchoFilter_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void EchoFilter_destroy(EchoFilter * aEchoFilter)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>EchoFilter_create</name>
          <externalName>EchoFilter_create</externalName>
          <kind>11</kind>
          <help>Original function: EchoFilter * EchoFilter_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>EchoFilter_setParams</name>
          <externalName>EchoFilter_setParams</externalName>
          <kind>11</kind>
          <help>Original function: int EchoFilter_setParams(EchoFilter * aEchoFilter, float aDelay)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>EchoFilter_setParamsEx</name>
          <externalName>EchoFilter_setParamsEx</externalName>
          <kind>11</kind>
          <help>Original function: int EchoFilter_setParamsEx(EchoFilter * aEchoFilter, float aDelay, float aDecay, float aFilter)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>FFTFilter_destroy</name>
          <externalName>FFTFilter_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void FFTFilter_destroy(FFTFilter * aFFTFilter)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>FFTFilter_create</name>
          <externalName>FFTFilter_create</externalName>
          <kind>11</kind>
          <help>Original function: FFTFilter * FFTFilter_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>FFTFilter_setParameters</name>
          <externalName>FFTFilter_setParameters</externalName>
          <kind>11</kind>
          <help>Original function: int FFTFilter_setParameters(FFTFilter * aFFTFilter, int aShift)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>FFTFilter_setParametersEx</name>
          <externalName>FFTFilter_setParametersEx</externalName>
          <kind>11</kind>
          <help>Original function: int FFTFilter_setParametersEx(FFTFilter * aFFTFilter, int aShift, int aCombine, float aScale)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>FlangerFilter_destroy</name>
          <externalName>FlangerFilter_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void FlangerFilter_destroy(FlangerFilter * aFlangerFilter)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>FlangerFilter_create</name>
          <externalName>FlangerFilter_create</externalName>
          <kind>11</kind>
          <help>Original function: FlangerFilter * FlangerFilter_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>FlangerFilter_setParams</name>
          <externalName>FlangerFilter_setParams</externalName>
          <kind>11</kind>
          <help>Original function: int FlangerFilter_setParams(FlangerFilter * aFlangerFilter, float aDelay, float aFreq)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>LofiFilter_destroy</name>
          <externalName>LofiFilter_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void LofiFilter_destroy(LofiFilter * aLofiFilter)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>LofiFilter_create</name>
          <externalName>LofiFilter_create</externalName>
          <kind>11</kind>
          <help>Original function: LofiFilter * LofiFilter_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>LofiFilter_setParams</name>
          <externalName>LofiFilter_setParams</externalName>
          <kind>11</kind>
          <help>Original function: int LofiFilter_setParams(LofiFilter * aLofiFilter, float aSampleRate, float aBitdepth)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>DCRemovalFilter_destroy</name>
          <externalName>DCRemovalFilter_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void DCRemovalFilter_destroy(DCRemovalFilter * aDCRemovalFilter)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>DCRemovalFilter_create</name>
          <externalName>DCRemovalFilter_create</externalName>
          <kind>11</kind>
          <help>Original function: DCRemovalFilter * DCRemovalFilter_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>DCRemovalFilter_setParams</name>
          <externalName>DCRemovalFilter_setParams</externalName>
          <kind>11</kind>
          <help>Original function: int DCRemovalFilter_setParams(DCRemovalFilter * aDCRemovalFilter)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>DCRemovalFilter_setParamsEx</name>
          <externalName>DCRemovalFilter_setParamsEx</externalName>
          <kind>11</kind>
          <help>Original function: int DCRemovalFilter_setParamsEx(DCRemovalFilter * aDCRemovalFilter, float aLength)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_destroy</name>
          <externalName>Modplug_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_destroy(Modplug * aModplug)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_create</name>
          <externalName>Modplug_create</externalName>
          <kind>11</kind>
          <help>Original function: Modplug * Modplug_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>Modplug_load</name>
          <externalName>Modplug_load</externalName>
          <kind>11</kind>
          <help>Original function: int Modplug_load(Modplug * aModplug, const char * aFilename)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_setLooping</name>
          <externalName>Modplug_setLooping</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_setLooping(Modplug * aModplug, int aLoop)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_set3dMinMaxDistance</name>
          <externalName>Modplug_set3dMinMaxDistance</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_set3dMinMaxDistance(Modplug * aModplug, float aMinDistance, float aMaxDistance)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_set3dAttenuation</name>
          <externalName>Modplug_set3dAttenuation</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_set3dAttenuation(Modplug * aModplug, unsigned int aAttenuationModel, float aAttenuationRolloffFactor)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_set3dDopplerFactor</name>
          <externalName>Modplug_set3dDopplerFactor</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_set3dDopplerFactor(Modplug * aModplug, float aDopplerFactor)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_set3dProcessing</name>
          <externalName>Modplug_set3dProcessing</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_set3dProcessing(Modplug * aModplug, int aDo3dProcessing)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_set3dListenerRelative</name>
          <externalName>Modplug_set3dListenerRelative</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_set3dListenerRelative(Modplug * aModplug, int aListenerRelative)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_set3dDistanceDelay</name>
          <externalName>Modplug_set3dDistanceDelay</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_set3dDistanceDelay(Modplug * aModplug, int aDistanceDelay)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_set3dCollider</name>
          <externalName>Modplug_set3dCollider</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_set3dCollider(Modplug * aModplug, AudioCollider * aCollider)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_set3dColliderEx</name>
          <externalName>Modplug_set3dColliderEx</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_set3dColliderEx(Modplug * aModplug, AudioCollider * aCollider, int aUserData)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_setFilter</name>
          <externalName>Modplug_setFilter</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_setFilter(Modplug * aModplug, unsigned int aFilterId, Filter * aFilter)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Modplug_stop</name>
          <externalName>Modplug_stop</externalName>
          <kind>11</kind>
          <help>Original function: void Modplug_stop(Modplug * aModplug)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Prg_destroy</name>
          <externalName>Prg_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void Prg_destroy(Prg * aPrg)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Prg_create</name>
          <externalName>Prg_create</externalName>
          <kind>11</kind>
          <help>Original function: Prg * Prg_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>Prg_rand</name>
          <externalName>Prg_rand</externalName>
          <kind>11</kind>
          <help>Original function: unsigned int Prg_rand(Prg * aPrg)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Prg_srand</name>
          <externalName>Prg_srand</externalName>
          <kind>11</kind>
          <help>Original function: void Prg_srand(Prg * aPrg, int aSeed)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_destroy</name>
          <externalName>Sfxr_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_destroy(Sfxr * aSfxr)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_create</name>
          <externalName>Sfxr_create</externalName>
          <kind>11</kind>
          <help>Original function: Sfxr * Sfxr_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>Sfxr_resetParams</name>
          <externalName>Sfxr_resetParams</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_resetParams(Sfxr * aSfxr)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_loadParams</name>
          <externalName>Sfxr_loadParams</externalName>
          <kind>11</kind>
          <help>Original function: int Sfxr_loadParams(Sfxr * aSfxr, const char * aFilename)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_loadPreset</name>
          <externalName>Sfxr_loadPreset</externalName>
          <kind>11</kind>
          <help>Original function: int Sfxr_loadPreset(Sfxr * aSfxr, int aPresetNo, int aRandSeed)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_setLooping</name>
          <externalName>Sfxr_setLooping</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_setLooping(Sfxr * aSfxr, int aLoop)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_set3dMinMaxDistance</name>
          <externalName>Sfxr_set3dMinMaxDistance</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_set3dMinMaxDistance(Sfxr * aSfxr, float aMinDistance, float aMaxDistance)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_set3dAttenuation</name>
          <externalName>Sfxr_set3dAttenuation</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_set3dAttenuation(Sfxr * aSfxr, unsigned int aAttenuationModel, float aAttenuationRolloffFactor)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_set3dDopplerFactor</name>
          <externalName>Sfxr_set3dDopplerFactor</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_set3dDopplerFactor(Sfxr * aSfxr, float aDopplerFactor)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_set3dProcessing</name>
          <externalName>Sfxr_set3dProcessing</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_set3dProcessing(Sfxr * aSfxr, int aDo3dProcessing)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_set3dListenerRelative</name>
          <externalName>Sfxr_set3dListenerRelative</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_set3dListenerRelative(Sfxr * aSfxr, int aListenerRelative)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_set3dDistanceDelay</name>
          <externalName>Sfxr_set3dDistanceDelay</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_set3dDistanceDelay(Sfxr * aSfxr, int aDistanceDelay)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_set3dCollider</name>
          <externalName>Sfxr_set3dCollider</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_set3dCollider(Sfxr * aSfxr, AudioCollider * aCollider)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_set3dColliderEx</name>
          <externalName>Sfxr_set3dColliderEx</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_set3dColliderEx(Sfxr * aSfxr, AudioCollider * aCollider, int aUserData)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_setFilter</name>
          <externalName>Sfxr_setFilter</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_setFilter(Sfxr * aSfxr, unsigned int aFilterId, Filter * aFilter)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Sfxr_stop</name>
          <externalName>Sfxr_stop</externalName>
          <kind>11</kind>
          <help>Original function: void Sfxr_stop(Sfxr * aSfxr)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_destroy</name>
          <externalName>Monotone_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_destroy(Monotone * aMonotone)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_clear</name>
          <externalName>Monotone_clear</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_clear(Monotone * aMonotone)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_create</name>
          <externalName>Monotone_create</externalName>
          <kind>11</kind>
          <help>Original function: Monotone * Monotone_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>Monotone_load</name>
          <externalName>Monotone_load</externalName>
          <kind>11</kind>
          <help>Original function: int Monotone_load(Monotone * aMonotone, const char * aFilename)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_loadEx</name>
          <externalName>Monotone_loadEx</externalName>
          <kind>11</kind>
          <help>Original function: int Monotone_loadEx(Monotone * aMonotone, const char * aFilename, int aHardwareChannels)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_setLooping</name>
          <externalName>Monotone_setLooping</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_setLooping(Monotone * aMonotone, int aLoop)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_set3dMinMaxDistance</name>
          <externalName>Monotone_set3dMinMaxDistance</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_set3dMinMaxDistance(Monotone * aMonotone, float aMinDistance, float aMaxDistance)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_set3dAttenuation</name>
          <externalName>Monotone_set3dAttenuation</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_set3dAttenuation(Monotone * aMonotone, unsigned int aAttenuationModel, float aAttenuationRolloffFactor)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_set3dDopplerFactor</name>
          <externalName>Monotone_set3dDopplerFactor</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_set3dDopplerFactor(Monotone * aMonotone, float aDopplerFactor)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_set3dProcessing</name>
          <externalName>Monotone_set3dProcessing</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_set3dProcessing(Monotone * aMonotone, int aDo3dProcessing)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_set3dListenerRelative</name>
          <externalName>Monotone_set3dListenerRelative</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_set3dListenerRelative(Monotone * aMonotone, int aListenerRelative)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_set3dDistanceDelay</name>
          <externalName>Monotone_set3dDistanceDelay</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_set3dDistanceDelay(Monotone * aMonotone, int aDistanceDelay)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_set3dCollider</name>
          <externalName>Monotone_set3dCollider</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_set3dCollider(Monotone * aMonotone, AudioCollider * aCollider)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_set3dColliderEx</name>
          <externalName>Monotone_set3dColliderEx</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_set3dColliderEx(Monotone * aMonotone, AudioCollider * aCollider, int aUserData)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_setFilter</name>
          <externalName>Monotone_setFilter</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_setFilter(Monotone * aMonotone, unsigned int aFilterId, Filter * aFilter)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Monotone_stop</name>
          <externalName>Monotone_stop</externalName>
          <kind>11</kind>
          <help>Original function: void Monotone_stop(Monotone * aMonotone)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_destroy</name>
          <externalName>Speech_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_destroy(Speech * aSpeech)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_create</name>
          <externalName>Speech_create</externalName>
          <kind>11</kind>
          <help>Original function: Speech * Speech_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>Speech_setText</name>
          <externalName>Speech_setText</externalName>
          <kind>11</kind>
          <help>Original function: int Speech_setText(Speech * aSpeech, const char * aText)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_setLooping</name>
          <externalName>Speech_setLooping</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_setLooping(Speech * aSpeech, int aLoop)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_set3dMinMaxDistance</name>
          <externalName>Speech_set3dMinMaxDistance</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_set3dMinMaxDistance(Speech * aSpeech, float aMinDistance, float aMaxDistance)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_set3dAttenuation</name>
          <externalName>Speech_set3dAttenuation</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_set3dAttenuation(Speech * aSpeech, unsigned int aAttenuationModel, float aAttenuationRolloffFactor)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_set3dDopplerFactor</name>
          <externalName>Speech_set3dDopplerFactor</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_set3dDopplerFactor(Speech * aSpeech, float aDopplerFactor)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_set3dProcessing</name>
          <externalName>Speech_set3dProcessing</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_set3dProcessing(Speech * aSpeech, int aDo3dProcessing)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_set3dListenerRelative</name>
          <externalName>Speech_set3dListenerRelative</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_set3dListenerRelative(Speech * aSpeech, int aListenerRelative)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_set3dDistanceDelay</name>
          <externalName>Speech_set3dDistanceDelay</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_set3dDistanceDelay(Speech * aSpeech, int aDistanceDelay)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_set3dCollider</name>
          <externalName>Speech_set3dCollider</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_set3dCollider(Speech * aSpeech, AudioCollider * aCollider)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_set3dColliderEx</name>
          <externalName>Speech_set3dColliderEx</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_set3dColliderEx(Speech * aSpeech, AudioCollider * aCollider, int aUserData)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_setFilter</name>
          <externalName>Speech_setFilter</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_setFilter(Speech * aSpeech, unsigned int aFilterId, Filter * aFilter)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Speech_stop</name>
          <externalName>Speech_stop</externalName>
          <kind>11</kind>
          <help>Original function: void Speech_stop(Speech * aSpeech)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_destroy</name>
          <externalName>Wav_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_destroy(Wav * aWav)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_create</name>
          <externalName>Wav_create</externalName>
          <kind>11</kind>
          <help>Original function: Wav * Wav_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>Wav_load</name>
          <externalName>Wav_load</externalName>
          <kind>11</kind>
          <help>Original function: int Wav_load(Wav * aWav, const char * aFilename)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_getLength</name>
          <externalName>Wav_getLength</externalName>
          <kind>11</kind>
          <help>Original function: double Wav_getLength(Wav * aWav)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_setLooping</name>
          <externalName>Wav_setLooping</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_setLooping(Wav * aWav, int aLoop)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_set3dMinMaxDistance</name>
          <externalName>Wav_set3dMinMaxDistance</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_set3dMinMaxDistance(Wav * aWav, float aMinDistance, float aMaxDistance)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_set3dAttenuation</name>
          <externalName>Wav_set3dAttenuation</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_set3dAttenuation(Wav * aWav, unsigned int aAttenuationModel, float aAttenuationRolloffFactor)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_set3dDopplerFactor</name>
          <externalName>Wav_set3dDopplerFactor</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_set3dDopplerFactor(Wav * aWav, float aDopplerFactor)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_set3dProcessing</name>
          <externalName>Wav_set3dProcessing</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_set3dProcessing(Wav * aWav, int aDo3dProcessing)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_set3dListenerRelative</name>
          <externalName>Wav_set3dListenerRelative</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_set3dListenerRelative(Wav * aWav, int aListenerRelative)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_set3dDistanceDelay</name>
          <externalName>Wav_set3dDistanceDelay</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_set3dDistanceDelay(Wav * aWav, int aDistanceDelay)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_set3dCollider</name>
          <externalName>Wav_set3dCollider</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_set3dCollider(Wav * aWav, AudioCollider * aCollider)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_set3dColliderEx</name>
          <externalName>Wav_set3dColliderEx</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_set3dColliderEx(Wav * aWav, AudioCollider * aCollider, int aUserData)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_setFilter</name>
          <externalName>Wav_setFilter</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_setFilter(Wav * aWav, unsigned int aFilterId, Filter * aFilter)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>Wav_stop</name>
          <externalName>Wav_stop</externalName>
          <kind>11</kind>
          <help>Original function: void Wav_stop(Wav * aWav)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_destroy</name>
          <externalName>WavStream_destroy</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_destroy(WavStream * aWavStream)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_create</name>
          <externalName>WavStream_create</externalName>
          <kind>11</kind>
          <help>Original function: WavStream * WavStream_create()</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args>
          </args>
        </function>
        <function>
          <name>WavStream_load</name>
          <externalName>WavStream_load</externalName>
          <kind>11</kind>
          <help>Original function: int WavStream_load(WavStream * aWavStream, const char * aFilename)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_getLength</name>
          <externalName>WavStream_getLength</externalName>
          <kind>11</kind>
          <help>Original function: double WavStream_getLength(WavStream * aWavStream)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_setLooping</name>
          <externalName>WavStream_setLooping</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_setLooping(WavStream * aWavStream, int aLoop)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_set3dMinMaxDistance</name>
          <externalName>WavStream_set3dMinMaxDistance</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_set3dMinMaxDistance(WavStream * aWavStream, float aMinDistance, float aMaxDistance)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_set3dAttenuation</name>
          <externalName>WavStream_set3dAttenuation</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_set3dAttenuation(WavStream * aWavStream, unsigned int aAttenuationModel, float aAttenuationRolloffFactor)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_set3dDopplerFactor</name>
          <externalName>WavStream_set3dDopplerFactor</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_set3dDopplerFactor(WavStream * aWavStream, float aDopplerFactor)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_set3dProcessing</name>
          <externalName>WavStream_set3dProcessing</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_set3dProcessing(WavStream * aWavStream, int aDo3dProcessing)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_set3dListenerRelative</name>
          <externalName>WavStream_set3dListenerRelative</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_set3dListenerRelative(WavStream * aWavStream, int aListenerRelative)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_set3dDistanceDelay</name>
          <externalName>WavStream_set3dDistanceDelay</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_set3dDistanceDelay(WavStream * aWavStream, int aDistanceDelay)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_set3dCollider</name>
          <externalName>WavStream_set3dCollider</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_set3dCollider(WavStream * aWavStream, AudioCollider * aCollider)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_set3dColliderEx</name>
          <externalName>WavStream_set3dColliderEx</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_set3dColliderEx(WavStream * aWavStream, AudioCollider * aCollider, int aUserData)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_setFilter</name>
          <externalName>WavStream_setFilter</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_setFilter(WavStream * aWavStream, unsigned int aFilterId, Filter * aFilter)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>WavStream_stop</name>
          <externalName>WavStream_stop</externalName>
          <kind>11</kind>
          <help>Original function: void WavStream_stop(WavStream * aWavStream)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
      </functions>
      <constants>
        <constant>
          <name>FFTFILTER_OVER</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_WASAPI</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_AUTO</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>BIQUADRESONANTFILTER_NONE</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_CLIP_ROUNDOFF</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>LOFIFILTER_BITDEPTH</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_SDL2</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SFXR_HURT</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>FFTFILTER_MULTIPLY</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_ENABLE_VISUALIZATION</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>BIQUADRESONANTFILTER_HIGHPASS</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SFXR_LASER</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SFXR_BLIP</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SFXR_JUMP</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>LOFIFILTER_WET</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>BIQUADRESONANTFILTER_WET</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>LOFIFILTER_SAMPLERATE</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_SDL</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>BIQUADRESONANTFILTER_LOWPASS</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SFXR_COIN</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>FLANGERFILTER_FREQ</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_PORTAUDIO</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>BIQUADRESONANTFILTER_SAMPLERATE</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SFXR_EXPLOSION</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>BIQUADRESONANTFILTER_BANDPASS</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_OPENAL</name>
          <value>8</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>FLANGERFILTER_WET</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>BIQUADRESONANTFILTER_FREQUENCY</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SFXR_POWERUP</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>FFTFILTER_SUBTRACT</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_BACKEND_MAX</name>
          <value>9</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>BIQUADRESONANTFILTER_RESONANCE</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_XAUDIO2</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>FLANGERFILTER_DELAY</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_WINMM</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>SOLOUD_OSS</name>
          <value>7</value>
          <hidden>0</hidden>
        </constant>
      </constants>
    </file>
  </files>
</extension>
