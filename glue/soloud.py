# SoLoud wrapper for Python
# This file is autogenerated; any changes will be overwritten

import ctypes
import sys

try:
	soloud_dll = ctypes.CDLL("soloud_x86")
except:
	print "SoLoud dynamic link library (soloud_x86.dll on Windows) not found. Terminating."
	sys.exit()

# Raw DLL functions
Soloud_destroy = soloud_dll.Soloud_destroy
Soloud_destroy.restype = None
Soloud_destroy.argtypes = [ctypes.c_void_p]

Soloud_create = soloud_dll.Soloud_create
Soloud_create.restype = ctypes.c_void_p
Soloud_create.argtypes = []

Soloud_init = soloud_dll.Soloud_init
Soloud_init.restype = ctypes.c_int
Soloud_init.argtypes = [ctypes.c_void_p]

Soloud_initEx = soloud_dll.Soloud_initEx
Soloud_initEx.restype = ctypes.c_int
Soloud_initEx.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_uint, ctypes.c_uint, ctypes.c_uint]

Soloud_deinit = soloud_dll.Soloud_deinit
Soloud_deinit.restype = None
Soloud_deinit.argtypes = [ctypes.c_void_p]

Soloud_getVersion = soloud_dll.Soloud_getVersion
Soloud_getVersion.restype = ctypes.c_uint
Soloud_getVersion.argtypes = [ctypes.c_void_p]

Soloud_getErrorString = soloud_dll.Soloud_getErrorString
Soloud_getErrorString.restype = ctypes.c_char_p
Soloud_getErrorString.argtypes = [ctypes.c_void_p, ctypes.c_int]

Soloud_play = soloud_dll.Soloud_play
Soloud_play.restype = ctypes.c_uint
Soloud_play.argtypes = [ctypes.c_void_p, ctypes.c_void_p]

Soloud_playEx = soloud_dll.Soloud_playEx
Soloud_playEx.restype = ctypes.c_uint
Soloud_playEx.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_float, ctypes.c_float, ctypes.c_int, ctypes.c_uint]

Soloud_playClocked = soloud_dll.Soloud_playClocked
Soloud_playClocked.restype = ctypes.c_uint
Soloud_playClocked.argtypes = [ctypes.c_void_p, ctypes.c_double, ctypes.c_void_p]

Soloud_playClockedEx = soloud_dll.Soloud_playClockedEx
Soloud_playClockedEx.restype = ctypes.c_uint
Soloud_playClockedEx.argtypes = [ctypes.c_void_p, ctypes.c_double, ctypes.c_void_p, ctypes.c_float, ctypes.c_float, ctypes.c_uint]

Soloud_seek = soloud_dll.Soloud_seek
Soloud_seek.restype = None
Soloud_seek.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_double]

Soloud_stop = soloud_dll.Soloud_stop
Soloud_stop.restype = None
Soloud_stop.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_stopAll = soloud_dll.Soloud_stopAll
Soloud_stopAll.restype = None
Soloud_stopAll.argtypes = [ctypes.c_void_p]

Soloud_stopAudioSource = soloud_dll.Soloud_stopAudioSource
Soloud_stopAudioSource.restype = None
Soloud_stopAudioSource.argtypes = [ctypes.c_void_p, ctypes.c_void_p]

Soloud_setFilterParameter = soloud_dll.Soloud_setFilterParameter
Soloud_setFilterParameter.restype = None
Soloud_setFilterParameter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_uint, ctypes.c_uint, ctypes.c_float]

Soloud_getFilterParameter = soloud_dll.Soloud_getFilterParameter
Soloud_getFilterParameter.restype = ctypes.c_float
Soloud_getFilterParameter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_uint, ctypes.c_uint]

Soloud_fadeFilterParameter = soloud_dll.Soloud_fadeFilterParameter
Soloud_fadeFilterParameter.restype = None
Soloud_fadeFilterParameter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_uint, ctypes.c_uint, ctypes.c_float, ctypes.c_double]

Soloud_oscillateFilterParameter = soloud_dll.Soloud_oscillateFilterParameter
Soloud_oscillateFilterParameter.restype = None
Soloud_oscillateFilterParameter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_uint, ctypes.c_uint, ctypes.c_float, ctypes.c_float, ctypes.c_double]

Soloud_getStreamTime = soloud_dll.Soloud_getStreamTime
Soloud_getStreamTime.restype = ctypes.c_double
Soloud_getStreamTime.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_getPause = soloud_dll.Soloud_getPause
Soloud_getPause.restype = ctypes.c_int
Soloud_getPause.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_getVolume = soloud_dll.Soloud_getVolume
Soloud_getVolume.restype = ctypes.c_float
Soloud_getVolume.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_getPan = soloud_dll.Soloud_getPan
Soloud_getPan.restype = ctypes.c_float
Soloud_getPan.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_getSamplerate = soloud_dll.Soloud_getSamplerate
Soloud_getSamplerate.restype = ctypes.c_float
Soloud_getSamplerate.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_getProtectVoice = soloud_dll.Soloud_getProtectVoice
Soloud_getProtectVoice.restype = ctypes.c_int
Soloud_getProtectVoice.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_getActiveVoiceCount = soloud_dll.Soloud_getActiveVoiceCount
Soloud_getActiveVoiceCount.restype = ctypes.c_uint
Soloud_getActiveVoiceCount.argtypes = [ctypes.c_void_p]

Soloud_isValidVoiceHandle = soloud_dll.Soloud_isValidVoiceHandle
Soloud_isValidVoiceHandle.restype = ctypes.c_int
Soloud_isValidVoiceHandle.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_getRelativePlaySpeed = soloud_dll.Soloud_getRelativePlaySpeed
Soloud_getRelativePlaySpeed.restype = ctypes.c_float
Soloud_getRelativePlaySpeed.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_getPostClipScaler = soloud_dll.Soloud_getPostClipScaler
Soloud_getPostClipScaler.restype = ctypes.c_float
Soloud_getPostClipScaler.argtypes = [ctypes.c_void_p]

Soloud_getGlobalVolume = soloud_dll.Soloud_getGlobalVolume
Soloud_getGlobalVolume.restype = ctypes.c_float
Soloud_getGlobalVolume.argtypes = [ctypes.c_void_p]

Soloud_setGlobalVolume = soloud_dll.Soloud_setGlobalVolume
Soloud_setGlobalVolume.restype = None
Soloud_setGlobalVolume.argtypes = [ctypes.c_void_p, ctypes.c_float]

Soloud_setPostClipScaler = soloud_dll.Soloud_setPostClipScaler
Soloud_setPostClipScaler.restype = None
Soloud_setPostClipScaler.argtypes = [ctypes.c_void_p, ctypes.c_float]

Soloud_setPause = soloud_dll.Soloud_setPause
Soloud_setPause.restype = None
Soloud_setPause.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_int]

Soloud_setPauseAll = soloud_dll.Soloud_setPauseAll
Soloud_setPauseAll.restype = None
Soloud_setPauseAll.argtypes = [ctypes.c_void_p, ctypes.c_int]

Soloud_setRelativePlaySpeed = soloud_dll.Soloud_setRelativePlaySpeed
Soloud_setRelativePlaySpeed.restype = None
Soloud_setRelativePlaySpeed.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float]

Soloud_setProtectVoice = soloud_dll.Soloud_setProtectVoice
Soloud_setProtectVoice.restype = None
Soloud_setProtectVoice.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_int]

Soloud_setSamplerate = soloud_dll.Soloud_setSamplerate
Soloud_setSamplerate.restype = None
Soloud_setSamplerate.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float]

Soloud_setPan = soloud_dll.Soloud_setPan
Soloud_setPan.restype = None
Soloud_setPan.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float]

Soloud_setPanAbsolute = soloud_dll.Soloud_setPanAbsolute
Soloud_setPanAbsolute.restype = None
Soloud_setPanAbsolute.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float, ctypes.c_float]

Soloud_setVolume = soloud_dll.Soloud_setVolume
Soloud_setVolume.restype = None
Soloud_setVolume.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float]

Soloud_setDelaySamples = soloud_dll.Soloud_setDelaySamples
Soloud_setDelaySamples.restype = None
Soloud_setDelaySamples.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_uint]

Soloud_fadeVolume = soloud_dll.Soloud_fadeVolume
Soloud_fadeVolume.restype = None
Soloud_fadeVolume.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float, ctypes.c_double]

Soloud_fadePan = soloud_dll.Soloud_fadePan
Soloud_fadePan.restype = None
Soloud_fadePan.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float, ctypes.c_double]

Soloud_fadeRelativePlaySpeed = soloud_dll.Soloud_fadeRelativePlaySpeed
Soloud_fadeRelativePlaySpeed.restype = None
Soloud_fadeRelativePlaySpeed.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float, ctypes.c_double]

Soloud_fadeGlobalVolume = soloud_dll.Soloud_fadeGlobalVolume
Soloud_fadeGlobalVolume.restype = None
Soloud_fadeGlobalVolume.argtypes = [ctypes.c_void_p, ctypes.c_float, ctypes.c_double]

Soloud_schedulePause = soloud_dll.Soloud_schedulePause
Soloud_schedulePause.restype = None
Soloud_schedulePause.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_double]

Soloud_scheduleStop = soloud_dll.Soloud_scheduleStop
Soloud_scheduleStop.restype = None
Soloud_scheduleStop.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_double]

Soloud_oscillateVolume = soloud_dll.Soloud_oscillateVolume
Soloud_oscillateVolume.restype = None
Soloud_oscillateVolume.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float, ctypes.c_float, ctypes.c_double]

Soloud_oscillatePan = soloud_dll.Soloud_oscillatePan
Soloud_oscillatePan.restype = None
Soloud_oscillatePan.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float, ctypes.c_float, ctypes.c_double]

Soloud_oscillateRelativePlaySpeed = soloud_dll.Soloud_oscillateRelativePlaySpeed
Soloud_oscillateRelativePlaySpeed.restype = None
Soloud_oscillateRelativePlaySpeed.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_float, ctypes.c_float, ctypes.c_double]

Soloud_oscillateGlobalVolume = soloud_dll.Soloud_oscillateGlobalVolume
Soloud_oscillateGlobalVolume.restype = None
Soloud_oscillateGlobalVolume.argtypes = [ctypes.c_void_p, ctypes.c_float, ctypes.c_float, ctypes.c_double]

Soloud_setGlobalFilter = soloud_dll.Soloud_setGlobalFilter
Soloud_setGlobalFilter.restype = None
Soloud_setGlobalFilter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_void_p]

Soloud_setVisualizationEnable = soloud_dll.Soloud_setVisualizationEnable
Soloud_setVisualizationEnable.restype = None
Soloud_setVisualizationEnable.argtypes = [ctypes.c_void_p, ctypes.c_int]

Soloud_calcFFT = soloud_dll.Soloud_calcFFT
Soloud_calcFFT.restype = ctypes.POINTER(ctypes.c_float * 256)
Soloud_calcFFT.argtypes = [ctypes.c_void_p]

Soloud_getWave = soloud_dll.Soloud_getWave
Soloud_getWave.restype = ctypes.POINTER(ctypes.c_float * 256)
Soloud_getWave.argtypes = [ctypes.c_void_p]

Soloud_getLoopCount = soloud_dll.Soloud_getLoopCount
Soloud_getLoopCount.restype = ctypes.c_uint
Soloud_getLoopCount.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_createVoiceGroup = soloud_dll.Soloud_createVoiceGroup
Soloud_createVoiceGroup.restype = ctypes.c_uint
Soloud_createVoiceGroup.argtypes = [ctypes.c_void_p]

Soloud_destroyVoiceGroup = soloud_dll.Soloud_destroyVoiceGroup
Soloud_destroyVoiceGroup.restype = ctypes.c_int
Soloud_destroyVoiceGroup.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_addVoiceToGroup = soloud_dll.Soloud_addVoiceToGroup
Soloud_addVoiceToGroup.restype = ctypes.c_int
Soloud_addVoiceToGroup.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_uint]

Soloud_isVoiceGroup = soloud_dll.Soloud_isVoiceGroup
Soloud_isVoiceGroup.restype = ctypes.c_int
Soloud_isVoiceGroup.argtypes = [ctypes.c_void_p, ctypes.c_uint]

Soloud_isVoiceGroupEmpty = soloud_dll.Soloud_isVoiceGroupEmpty
Soloud_isVoiceGroupEmpty.restype = ctypes.c_int
Soloud_isVoiceGroupEmpty.argtypes = [ctypes.c_void_p, ctypes.c_uint]

BiquadResonantFilter_destroy = soloud_dll.BiquadResonantFilter_destroy
BiquadResonantFilter_destroy.restype = None
BiquadResonantFilter_destroy.argtypes = [ctypes.c_void_p]

BiquadResonantFilter_create = soloud_dll.BiquadResonantFilter_create
BiquadResonantFilter_create.restype = ctypes.c_void_p
BiquadResonantFilter_create.argtypes = []

BiquadResonantFilter_setParams = soloud_dll.BiquadResonantFilter_setParams
BiquadResonantFilter_setParams.restype = ctypes.c_int
BiquadResonantFilter_setParams.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_float, ctypes.c_float, ctypes.c_float]

Bus_destroy = soloud_dll.Bus_destroy
Bus_destroy.restype = None
Bus_destroy.argtypes = [ctypes.c_void_p]

Bus_create = soloud_dll.Bus_create
Bus_create.restype = ctypes.c_void_p
Bus_create.argtypes = []

Bus_setFilter = soloud_dll.Bus_setFilter
Bus_setFilter.restype = None
Bus_setFilter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_void_p]

Bus_play = soloud_dll.Bus_play
Bus_play.restype = ctypes.c_uint
Bus_play.argtypes = [ctypes.c_void_p, ctypes.c_void_p]

Bus_playEx = soloud_dll.Bus_playEx
Bus_playEx.restype = ctypes.c_uint
Bus_playEx.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_float, ctypes.c_float, ctypes.c_int]

Bus_playClocked = soloud_dll.Bus_playClocked
Bus_playClocked.restype = ctypes.c_uint
Bus_playClocked.argtypes = [ctypes.c_void_p, ctypes.c_double, ctypes.c_void_p]

Bus_playClockedEx = soloud_dll.Bus_playClockedEx
Bus_playClockedEx.restype = ctypes.c_uint
Bus_playClockedEx.argtypes = [ctypes.c_void_p, ctypes.c_double, ctypes.c_void_p, ctypes.c_float, ctypes.c_float]

Bus_setVisualizationEnable = soloud_dll.Bus_setVisualizationEnable
Bus_setVisualizationEnable.restype = None
Bus_setVisualizationEnable.argtypes = [ctypes.c_void_p, ctypes.c_int]

Bus_calcFFT = soloud_dll.Bus_calcFFT
Bus_calcFFT.restype = ctypes.POINTER(ctypes.c_float * 256)
Bus_calcFFT.argtypes = [ctypes.c_void_p]

Bus_getWave = soloud_dll.Bus_getWave
Bus_getWave.restype = ctypes.POINTER(ctypes.c_float * 256)
Bus_getWave.argtypes = [ctypes.c_void_p]

Bus_setLooping = soloud_dll.Bus_setLooping
Bus_setLooping.restype = None
Bus_setLooping.argtypes = [ctypes.c_void_p, ctypes.c_int]

Bus_stop = soloud_dll.Bus_stop
Bus_stop.restype = None
Bus_stop.argtypes = [ctypes.c_void_p]

EchoFilter_destroy = soloud_dll.EchoFilter_destroy
EchoFilter_destroy.restype = None
EchoFilter_destroy.argtypes = [ctypes.c_void_p]

EchoFilter_create = soloud_dll.EchoFilter_create
EchoFilter_create.restype = ctypes.c_void_p
EchoFilter_create.argtypes = []

EchoFilter_setParams = soloud_dll.EchoFilter_setParams
EchoFilter_setParams.restype = ctypes.c_int
EchoFilter_setParams.argtypes = [ctypes.c_void_p, ctypes.c_float]

EchoFilter_setParamsEx = soloud_dll.EchoFilter_setParamsEx
EchoFilter_setParamsEx.restype = ctypes.c_int
EchoFilter_setParamsEx.argtypes = [ctypes.c_void_p, ctypes.c_float, ctypes.c_float, ctypes.c_float]

FFTFilter_destroy = soloud_dll.FFTFilter_destroy
FFTFilter_destroy.restype = None
FFTFilter_destroy.argtypes = [ctypes.c_void_p]

FFTFilter_create = soloud_dll.FFTFilter_create
FFTFilter_create.restype = ctypes.c_void_p
FFTFilter_create.argtypes = []

FFTFilter_setParameters = soloud_dll.FFTFilter_setParameters
FFTFilter_setParameters.restype = ctypes.c_int
FFTFilter_setParameters.argtypes = [ctypes.c_void_p, ctypes.c_int]

FFTFilter_setParametersEx = soloud_dll.FFTFilter_setParametersEx
FFTFilter_setParametersEx.restype = ctypes.c_int
FFTFilter_setParametersEx.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int, ctypes.c_float]

FlangerFilter_destroy = soloud_dll.FlangerFilter_destroy
FlangerFilter_destroy.restype = None
FlangerFilter_destroy.argtypes = [ctypes.c_void_p]

FlangerFilter_create = soloud_dll.FlangerFilter_create
FlangerFilter_create.restype = ctypes.c_void_p
FlangerFilter_create.argtypes = []

FlangerFilter_setParams = soloud_dll.FlangerFilter_setParams
FlangerFilter_setParams.restype = ctypes.c_int
FlangerFilter_setParams.argtypes = [ctypes.c_void_p, ctypes.c_float, ctypes.c_float]

LofiFilter_destroy = soloud_dll.LofiFilter_destroy
LofiFilter_destroy.restype = None
LofiFilter_destroy.argtypes = [ctypes.c_void_p]

LofiFilter_create = soloud_dll.LofiFilter_create
LofiFilter_create.restype = ctypes.c_void_p
LofiFilter_create.argtypes = []

LofiFilter_setParams = soloud_dll.LofiFilter_setParams
LofiFilter_setParams.restype = ctypes.c_int
LofiFilter_setParams.argtypes = [ctypes.c_void_p, ctypes.c_float, ctypes.c_float]

Modplug_destroy = soloud_dll.Modplug_destroy
Modplug_destroy.restype = None
Modplug_destroy.argtypes = [ctypes.c_void_p]

Modplug_create = soloud_dll.Modplug_create
Modplug_create.restype = ctypes.c_void_p
Modplug_create.argtypes = []

Modplug_load = soloud_dll.Modplug_load
Modplug_load.restype = ctypes.c_int
Modplug_load.argtypes = [ctypes.c_void_p, ctypes.c_char_p]

Modplug_setLooping = soloud_dll.Modplug_setLooping
Modplug_setLooping.restype = None
Modplug_setLooping.argtypes = [ctypes.c_void_p, ctypes.c_int]

Modplug_setFilter = soloud_dll.Modplug_setFilter
Modplug_setFilter.restype = None
Modplug_setFilter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_void_p]

Modplug_stop = soloud_dll.Modplug_stop
Modplug_stop.restype = None
Modplug_stop.argtypes = [ctypes.c_void_p]

Prg_destroy = soloud_dll.Prg_destroy
Prg_destroy.restype = None
Prg_destroy.argtypes = [ctypes.c_void_p]

Prg_create = soloud_dll.Prg_create
Prg_create.restype = ctypes.c_void_p
Prg_create.argtypes = []

Prg_rand = soloud_dll.Prg_rand
Prg_rand.restype = ctypes.c_uint
Prg_rand.argtypes = [ctypes.c_void_p]

Prg_srand = soloud_dll.Prg_srand
Prg_srand.restype = None
Prg_srand.argtypes = [ctypes.c_void_p, ctypes.c_int]

Sfxr_destroy = soloud_dll.Sfxr_destroy
Sfxr_destroy.restype = None
Sfxr_destroy.argtypes = [ctypes.c_void_p]

Sfxr_create = soloud_dll.Sfxr_create
Sfxr_create.restype = ctypes.c_void_p
Sfxr_create.argtypes = []

Sfxr_resetParams = soloud_dll.Sfxr_resetParams
Sfxr_resetParams.restype = None
Sfxr_resetParams.argtypes = [ctypes.c_void_p]

Sfxr_loadParams = soloud_dll.Sfxr_loadParams
Sfxr_loadParams.restype = ctypes.c_int
Sfxr_loadParams.argtypes = [ctypes.c_void_p, ctypes.c_char_p]

Sfxr_loadPreset = soloud_dll.Sfxr_loadPreset
Sfxr_loadPreset.restype = ctypes.c_int
Sfxr_loadPreset.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int]

Sfxr_setLooping = soloud_dll.Sfxr_setLooping
Sfxr_setLooping.restype = None
Sfxr_setLooping.argtypes = [ctypes.c_void_p, ctypes.c_int]

Sfxr_setFilter = soloud_dll.Sfxr_setFilter
Sfxr_setFilter.restype = None
Sfxr_setFilter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_void_p]

Sfxr_stop = soloud_dll.Sfxr_stop
Sfxr_stop.restype = None
Sfxr_stop.argtypes = [ctypes.c_void_p]

Speech_destroy = soloud_dll.Speech_destroy
Speech_destroy.restype = None
Speech_destroy.argtypes = [ctypes.c_void_p]

Speech_create = soloud_dll.Speech_create
Speech_create.restype = ctypes.c_void_p
Speech_create.argtypes = []

Speech_setText = soloud_dll.Speech_setText
Speech_setText.restype = ctypes.c_int
Speech_setText.argtypes = [ctypes.c_void_p, ctypes.c_char_p]

Speech_setLooping = soloud_dll.Speech_setLooping
Speech_setLooping.restype = None
Speech_setLooping.argtypes = [ctypes.c_void_p, ctypes.c_int]

Speech_setFilter = soloud_dll.Speech_setFilter
Speech_setFilter.restype = None
Speech_setFilter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_void_p]

Speech_stop = soloud_dll.Speech_stop
Speech_stop.restype = None
Speech_stop.argtypes = [ctypes.c_void_p]

Wav_destroy = soloud_dll.Wav_destroy
Wav_destroy.restype = None
Wav_destroy.argtypes = [ctypes.c_void_p]

Wav_create = soloud_dll.Wav_create
Wav_create.restype = ctypes.c_void_p
Wav_create.argtypes = []

Wav_load = soloud_dll.Wav_load
Wav_load.restype = ctypes.c_int
Wav_load.argtypes = [ctypes.c_void_p, ctypes.c_char_p]

Wav_loadMem = soloud_dll.Wav_loadMem
Wav_loadMem.restype = ctypes.c_int
Wav_loadMem.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_ubyte), ctypes.c_uint]

Wav_getLength = soloud_dll.Wav_getLength
Wav_getLength.restype = ctypes.c_double
Wav_getLength.argtypes = [ctypes.c_void_p]

Wav_setLooping = soloud_dll.Wav_setLooping
Wav_setLooping.restype = None
Wav_setLooping.argtypes = [ctypes.c_void_p, ctypes.c_int]

Wav_setFilter = soloud_dll.Wav_setFilter
Wav_setFilter.restype = None
Wav_setFilter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_void_p]

Wav_stop = soloud_dll.Wav_stop
Wav_stop.restype = None
Wav_stop.argtypes = [ctypes.c_void_p]

WavStream_destroy = soloud_dll.WavStream_destroy
WavStream_destroy.restype = None
WavStream_destroy.argtypes = [ctypes.c_void_p]

WavStream_create = soloud_dll.WavStream_create
WavStream_create.restype = ctypes.c_void_p
WavStream_create.argtypes = []

WavStream_load = soloud_dll.WavStream_load
WavStream_load.restype = ctypes.c_int
WavStream_load.argtypes = [ctypes.c_void_p, ctypes.c_char_p]

WavStream_getLength = soloud_dll.WavStream_getLength
WavStream_getLength.restype = ctypes.c_double
WavStream_getLength.argtypes = [ctypes.c_void_p]

WavStream_setLooping = soloud_dll.WavStream_setLooping
WavStream_setLooping.restype = None
WavStream_setLooping.argtypes = [ctypes.c_void_p, ctypes.c_int]

WavStream_setFilter = soloud_dll.WavStream_setFilter
WavStream_setFilter.restype = None
WavStream_setFilter.argtypes = [ctypes.c_void_p, ctypes.c_uint, ctypes.c_void_p]

WavStream_stop = soloud_dll.WavStream_stop
WavStream_stop.restype = None
WavStream_stop.argtypes = [ctypes.c_void_p]

# OOP wrappers

class Soloud(object):
	WASAPI = 6
	AUTO = 0
	CLIP_ROUNDOFF = 1
	SDL2 = 2
	ENABLE_VISUALIZATION = 2
	SDL = 1
	PORTAUDIO = 3
	OPENAL = 8
	BACKEND_MAX = 9
	XAUDIO2 = 5
	WINMM = 4
	OSS = 7
	def __init__(self):
		self.objhandle = Soloud_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		Soloud_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		Soloud_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		Soloud_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		Soloud_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def init(self, aFlags = CLIP_ROUNDOFF, aBackend = AUTO, aSamplerate = AUTO, aBufferSize = AUTO):
		return Soloud_initEx(self.objhandle, ctypes.c_uint(aFlags), ctypes.c_uint(aBackend), ctypes.c_uint(aSamplerate), ctypes.c_uint(aBufferSize))
	def deinit(self):
		Soloud_deinit(self.objhandle)
	def get_version(self):
		return Soloud_getVersion(self.objhandle)
	def get_error_string(self, aErrorCode):
		return Soloud_getErrorString(self.objhandle, ctypes.c_int(aErrorCode))
	def play(self, aSound, aVolume = 1.0, aPan = 0.0, aPaused = 0, aBus = 0):
		return Soloud_playEx(self.objhandle, aSound.objhandle, ctypes.c_float(aVolume), ctypes.c_float(aPan), ctypes.c_int(aPaused), ctypes.c_uint(aBus))
	def play_clocked(self, aSoundTime, aSound, aVolume = 1.0, aPan = 0.0, aBus = 0):
		return Soloud_playClockedEx(self.objhandle, ctypes.c_double(aSoundTime), aSound.objhandle, ctypes.c_float(aVolume), ctypes.c_float(aPan), ctypes.c_uint(aBus))
	def seek(self, aVoiceHandle, aSeconds):
		Soloud_seek(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_double(aSeconds))
	def stop(self, aVoiceHandle):
		Soloud_stop(self.objhandle, ctypes.c_uint(aVoiceHandle))
	def stop_all(self):
		Soloud_stopAll(self.objhandle)
	def stop_audio_source(self, aSound):
		Soloud_stopAudioSource(self.objhandle, aSound.objhandle)
	def set_filter_parameter(self, aVoiceHandle, aFilterId, aAttributeId, aValue):
		Soloud_setFilterParameter(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_uint(aFilterId), ctypes.c_uint(aAttributeId), ctypes.c_float(aValue))
	def get_filter_parameter(self, aVoiceHandle, aFilterId, aAttributeId):
		return Soloud_getFilterParameter(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_uint(aFilterId), ctypes.c_uint(aAttributeId))
	def fade_filter_parameter(self, aVoiceHandle, aFilterId, aAttributeId, aTo, aTime):
		Soloud_fadeFilterParameter(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_uint(aFilterId), ctypes.c_uint(aAttributeId), ctypes.c_float(aTo), ctypes.c_double(aTime))
	def oscillate_filter_parameter(self, aVoiceHandle, aFilterId, aAttributeId, aFrom, aTo, aTime):
		Soloud_oscillateFilterParameter(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_uint(aFilterId), ctypes.c_uint(aAttributeId), ctypes.c_float(aFrom), ctypes.c_float(aTo), ctypes.c_double(aTime))
	def get_stream_time(self, aVoiceHandle):
		return Soloud_getStreamTime(self.objhandle, ctypes.c_uint(aVoiceHandle))
	def get_pause(self, aVoiceHandle):
		return Soloud_getPause(self.objhandle, ctypes.c_uint(aVoiceHandle))
	def get_volume(self, aVoiceHandle):
		return Soloud_getVolume(self.objhandle, ctypes.c_uint(aVoiceHandle))
	def get_pan(self, aVoiceHandle):
		return Soloud_getPan(self.objhandle, ctypes.c_uint(aVoiceHandle))
	def get_samplerate(self, aVoiceHandle):
		return Soloud_getSamplerate(self.objhandle, ctypes.c_uint(aVoiceHandle))
	def get_protect_voice(self, aVoiceHandle):
		return Soloud_getProtectVoice(self.objhandle, ctypes.c_uint(aVoiceHandle))
	def get_active_voice_count(self):
		return Soloud_getActiveVoiceCount(self.objhandle)
	def is_valid_voice_handle(self, aVoiceHandle):
		return Soloud_isValidVoiceHandle(self.objhandle, ctypes.c_uint(aVoiceHandle))
	def get_relative_play_speed(self, aVoiceHandle):
		return Soloud_getRelativePlaySpeed(self.objhandle, ctypes.c_uint(aVoiceHandle))
	def get_post_clip_scaler(self):
		return Soloud_getPostClipScaler(self.objhandle)
	def get_global_volume(self):
		return Soloud_getGlobalVolume(self.objhandle)
	def set_global_volume(self, aVolume):
		Soloud_setGlobalVolume(self.objhandle, ctypes.c_float(aVolume))
	def set_post_clip_scaler(self, aScaler):
		Soloud_setPostClipScaler(self.objhandle, ctypes.c_float(aScaler))
	def set_pause(self, aVoiceHandle, aPause):
		Soloud_setPause(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_int(aPause))
	def set_pause_all(self, aPause):
		Soloud_setPauseAll(self.objhandle, ctypes.c_int(aPause))
	def set_relative_play_speed(self, aVoiceHandle, aSpeed):
		Soloud_setRelativePlaySpeed(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aSpeed))
	def set_protect_voice(self, aVoiceHandle, aProtect):
		Soloud_setProtectVoice(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_int(aProtect))
	def set_samplerate(self, aVoiceHandle, aSamplerate):
		Soloud_setSamplerate(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aSamplerate))
	def set_pan(self, aVoiceHandle, aPan):
		Soloud_setPan(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aPan))
	def set_pan_absolute(self, aVoiceHandle, aLVolume, aRVolume):
		Soloud_setPanAbsolute(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aLVolume), ctypes.c_float(aRVolume))
	def set_volume(self, aVoiceHandle, aVolume):
		Soloud_setVolume(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aVolume))
	def set_delay_samples(self, aVoiceHandle, aSamples):
		Soloud_setDelaySamples(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_uint(aSamples))
	def fade_volume(self, aVoiceHandle, aTo, aTime):
		Soloud_fadeVolume(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aTo), ctypes.c_double(aTime))
	def fade_pan(self, aVoiceHandle, aTo, aTime):
		Soloud_fadePan(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aTo), ctypes.c_double(aTime))
	def fade_relative_play_speed(self, aVoiceHandle, aTo, aTime):
		Soloud_fadeRelativePlaySpeed(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aTo), ctypes.c_double(aTime))
	def fade_global_volume(self, aTo, aTime):
		Soloud_fadeGlobalVolume(self.objhandle, ctypes.c_float(aTo), ctypes.c_double(aTime))
	def schedule_pause(self, aVoiceHandle, aTime):
		Soloud_schedulePause(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_double(aTime))
	def schedule_stop(self, aVoiceHandle, aTime):
		Soloud_scheduleStop(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_double(aTime))
	def oscillate_volume(self, aVoiceHandle, aFrom, aTo, aTime):
		Soloud_oscillateVolume(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aFrom), ctypes.c_float(aTo), ctypes.c_double(aTime))
	def oscillate_pan(self, aVoiceHandle, aFrom, aTo, aTime):
		Soloud_oscillatePan(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aFrom), ctypes.c_float(aTo), ctypes.c_double(aTime))
	def oscillate_relative_play_speed(self, aVoiceHandle, aFrom, aTo, aTime):
		Soloud_oscillateRelativePlaySpeed(self.objhandle, ctypes.c_uint(aVoiceHandle), ctypes.c_float(aFrom), ctypes.c_float(aTo), ctypes.c_double(aTime))
	def oscillate_global_volume(self, aFrom, aTo, aTime):
		Soloud_oscillateGlobalVolume(self.objhandle, ctypes.c_float(aFrom), ctypes.c_float(aTo), ctypes.c_double(aTime))
	def set_global_filter(self, aFilterId, aFilter):
		Soloud_setGlobalFilter(self.objhandle, ctypes.c_uint(aFilterId), aFilter.objhandle)
	def set_visualization_enable(self, aEnable):
		Soloud_setVisualizationEnable(self.objhandle, ctypes.c_int(aEnable))
	def calc_fft(self):
		floatbuf = Soloud_calcFFT(self.objhandle)
		return [f for f in floatbuf.contents]
	def get_wave(self):
		floatbuf = Soloud_getWave(self.objhandle)
		return [f for f in floatbuf.contents]
	def get_loop_count(self, aVoiceHandle):
		return Soloud_getLoopCount(self.objhandle, ctypes.c_uint(aVoiceHandle))
	def create_voice_group(self):
		return Soloud_createVoiceGroup(self.objhandle)
	def destroy_voice_group(self, aVoiceGroupHandle):
		return Soloud_destroyVoiceGroup(self.objhandle, ctypes.c_uint(aVoiceGroupHandle))
	def add_voice_to_group(self, aVoiceGroupHandle, aVoiceHandle):
		return Soloud_addVoiceToGroup(self.objhandle, ctypes.c_uint(aVoiceGroupHandle), ctypes.c_uint(aVoiceHandle))
	def is_voice_group(self, aVoiceGroupHandle):
		return Soloud_isVoiceGroup(self.objhandle, ctypes.c_uint(aVoiceGroupHandle))
	def is_voice_group_empty(self, aVoiceGroupHandle):
		return Soloud_isVoiceGroupEmpty(self.objhandle, ctypes.c_uint(aVoiceGroupHandle))

class BiquadResonantFilter(object):
	NONE = 0
	HIGHPASS = 2
	WET = 0
	LOWPASS = 1
	SAMPLERATE = 1
	BANDPASS = 3
	FREQUENCY = 2
	RESONANCE = 3
	def __init__(self):
		self.objhandle = BiquadResonantFilter_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		BiquadResonantFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		BiquadResonantFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		BiquadResonantFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		BiquadResonantFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def set_params(self, aType, aSampleRate, aFrequency, aResonance):
		return BiquadResonantFilter_setParams(self.objhandle, ctypes.c_int(aType), ctypes.c_float(aSampleRate), ctypes.c_float(aFrequency), ctypes.c_float(aResonance))

class Bus(object):
	def __init__(self):
		self.objhandle = Bus_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		Bus_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		Bus_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		Bus_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		Bus_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def set_filter(self, aFilterId, aFilter):
		Bus_setFilter(self.objhandle, ctypes.c_uint(aFilterId), aFilter.objhandle)
	def play(self, aSound, aVolume = 1.0, aPan = 0.0, aPaused = 0):
		return Bus_playEx(self.objhandle, aSound.objhandle, ctypes.c_float(aVolume), ctypes.c_float(aPan), ctypes.c_int(aPaused))
	def play_clocked(self, aSoundTime, aSound, aVolume = 1.0, aPan = 0.0):
		return Bus_playClockedEx(self.objhandle, ctypes.c_double(aSoundTime), aSound.objhandle, ctypes.c_float(aVolume), ctypes.c_float(aPan))
	def set_visualization_enable(self, aEnable):
		Bus_setVisualizationEnable(self.objhandle, ctypes.c_int(aEnable))
	def calc_fft(self):
		floatbuf = Bus_calcFFT(self.objhandle)
		return [f for f in floatbuf.contents]
	def get_wave(self):
		floatbuf = Bus_getWave(self.objhandle)
		return [f for f in floatbuf.contents]
	def set_looping(self, aLoop):
		Bus_setLooping(self.objhandle, ctypes.c_int(aLoop))
	def stop(self):
		Bus_stop(self.objhandle)

class EchoFilter(object):
	def __init__(self):
		self.objhandle = EchoFilter_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		EchoFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		EchoFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		EchoFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		EchoFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def set_params(self, aDelay, aDecay = 0.7, aFilter = 0.0):
		return EchoFilter_setParamsEx(self.objhandle, ctypes.c_float(aDelay), ctypes.c_float(aDecay), ctypes.c_float(aFilter))

class FFTFilter(object):
	OVER = 0
	MULTIPLY = 2
	SUBTRACT = 1
	def __init__(self):
		self.objhandle = FFTFilter_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		FFTFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		FFTFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		FFTFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		FFTFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def set_parameters(self, aShift, aCombine = 0, aScale = 0.002):
		return FFTFilter_setParametersEx(self.objhandle, ctypes.c_int(aShift), ctypes.c_int(aCombine), ctypes.c_float(aScale))

class FlangerFilter(object):
	FREQ = 2
	WET = 0
	DELAY = 1
	def __init__(self):
		self.objhandle = FlangerFilter_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		FlangerFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		FlangerFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		FlangerFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		FlangerFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def set_params(self, aDelay, aFreq):
		return FlangerFilter_setParams(self.objhandle, ctypes.c_float(aDelay), ctypes.c_float(aFreq))

class LofiFilter(object):
	BITDEPTH = 2
	WET = 0
	SAMPLERATE = 1
	def __init__(self):
		self.objhandle = LofiFilter_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		LofiFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		LofiFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		LofiFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		LofiFilter_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def set_params(self, aSampleRate, aBitdepth):
		return LofiFilter_setParams(self.objhandle, ctypes.c_float(aSampleRate), ctypes.c_float(aBitdepth))

class Modplug(object):
	def __init__(self):
		self.objhandle = Modplug_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		Modplug_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		Modplug_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		Modplug_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		Modplug_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def load(self, aFilename):
		return Modplug_load(self.objhandle, ctypes.c_char_p(aFilename))
	def set_looping(self, aLoop):
		Modplug_setLooping(self.objhandle, ctypes.c_int(aLoop))
	def set_filter(self, aFilterId, aFilter):
		Modplug_setFilter(self.objhandle, ctypes.c_uint(aFilterId), aFilter.objhandle)
	def stop(self):
		Modplug_stop(self.objhandle)

class Prg(object):
	def __init__(self):
		self.objhandle = Prg_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		Prg_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		Prg_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		Prg_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		Prg_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def rand(self):
		return Prg_rand(self.objhandle)
	def srand(self, aSeed):
		Prg_srand(self.objhandle, ctypes.c_int(aSeed))

class Sfxr(object):
	HURT = 4
	LASER = 1
	BLIP = 6
	JUMP = 5
	COIN = 0
	EXPLOSION = 2
	POWERUP = 3
	def __init__(self):
		self.objhandle = Sfxr_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		Sfxr_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		Sfxr_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		Sfxr_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		Sfxr_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def reset_params(self):
		Sfxr_resetParams(self.objhandle)
	def load_params(self, aFilename):
		return Sfxr_loadParams(self.objhandle, ctypes.c_char_p(aFilename))
	def load_preset(self, aPresetNo, aRandSeed):
		return Sfxr_loadPreset(self.objhandle, ctypes.c_int(aPresetNo), ctypes.c_int(aRandSeed))
	def set_looping(self, aLoop):
		Sfxr_setLooping(self.objhandle, ctypes.c_int(aLoop))
	def set_filter(self, aFilterId, aFilter):
		Sfxr_setFilter(self.objhandle, ctypes.c_uint(aFilterId), aFilter.objhandle)
	def stop(self):
		Sfxr_stop(self.objhandle)

class Speech(object):
	def __init__(self):
		self.objhandle = Speech_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		Speech_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		Speech_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		Speech_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		Speech_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def set_text(self, aText):
		return Speech_setText(self.objhandle, ctypes.c_char_p(aText))
	def set_looping(self, aLoop):
		Speech_setLooping(self.objhandle, ctypes.c_int(aLoop))
	def set_filter(self, aFilterId, aFilter):
		Speech_setFilter(self.objhandle, ctypes.c_uint(aFilterId), aFilter.objhandle)
	def stop(self):
		Speech_stop(self.objhandle)

class Wav(object):
	def __init__(self):
		self.objhandle = Wav_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		Wav_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		Wav_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		Wav_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		Wav_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def load(self, aFilename):
		return Wav_load(self.objhandle, ctypes.c_char_p(aFilename))
	def load_mem(self, aMem, aLength):
		return Wav_loadMem(self.objhandle, ctypes.POINTER(ctypes.c_ubyte)(aMem), ctypes.c_uint(aLength))
	def get_length(self):
		return Wav_getLength(self.objhandle)
	def set_looping(self, aLoop):
		Wav_setLooping(self.objhandle, ctypes.c_int(aLoop))
	def set_filter(self, aFilterId, aFilter):
		Wav_setFilter(self.objhandle, ctypes.c_uint(aFilterId), aFilter.objhandle)
	def stop(self):
		Wav_stop(self.objhandle)

class WavStream(object):
	def __init__(self):
		self.objhandle = WavStream_create()
	def __enter__(self):
		return self
	def __exit__(self, eType, eValue, eTrace):
		WavStream_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
		return False
	def close(self):
		WavStream_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def destroy(self):
		WavStream_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def quit(self):
		WavStream_destroy(self.objhandle)
		self.objhandle = ctypes.c_void_p(0)
	def load(self, aFilename):
		return WavStream_load(self.objhandle, ctypes.c_char_p(aFilename))
	def get_length(self):
		return WavStream_getLength(self.objhandle)
	def set_looping(self, aLoop):
		WavStream_setLooping(self.objhandle, ctypes.c_int(aLoop))
	def set_filter(self, aFilterId, aFilter):
		WavStream_setFilter(self.objhandle, ctypes.c_uint(aFilterId), aFilter.objhandle)
	def stop(self):
		WavStream_stop(self.objhandle)
